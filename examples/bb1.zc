adversary A1 : () -> Fq.
adversary A2 : (G * G * G) -> (G_t * G_t).
adversary A3 : (G_t * G * G) -> Bool.
oracle Kg1 : Fq -> (G * G).
oracle Kg2 : Fq -> (G * G).
bilinear map e : G * G -> G_t.

assumption bddh
  [ a <-$ Fq; b <-$ Fq; c <-$ Fq;
    let ga = g ^ a; let gb = g ^ b; let gc = g ^ c; let t = e(g,g)^(a*b*c); ]
  [ a <-$ Fq; b <-$ Fq; c <-$ Fq;
    let ga = g ^ a; let gb = g ^ b; let gc = g ^ c; d <-$ Fq; let t = e(g,g)^d; ]
    a b c d.

prove
  [ i' <- A1();
    c <-$ Fq;
    d <-$ Fq;
    h <-$ Fq;
    let pk1 = g^c;
    let pk2 = g^d;
    let pk3 = g^h;
    (m0,m1) <- A2(pk1,pk2,pk3)  with
      Kg1(i1) = [ (g^(c*d + r*(d*i1 + h)), g^r) | not (i1=i'), r <-$ Fq];
    b <-$ Bool;
    let mb = (b?m0:m1);
    e <-$ Fq;
    b' <- A3(mb * e(pk1,pk2)^e, g^e, (pk2^i'*pk3)^e) with
      Kg2(i2) = [ (g^(c*d + r2*(d*i2 + h)), g^r2)
                | not (i2=i'), r2 <-$ Fq];
  ] : b = b'.  print_goals : start.

  rnorm.  rswap 7 -3.  print_goals : after_norm.

  rrandom 5 _ (x -> x + d * i') z.
  rnorm. print_goals : after_random.

  rrandom_oracle (6,1,2) _ (x -> x * (i1 - i') + c) zz.
  rnorm.  print_goals : after_random_Kg1.

  rrandom_oracle (8,1,2) _ (x -> x * (i2 - i') + c) zzz.
  rnorm.  print_goals : after_random_Kg2.

  rswap 1 3.  print_goals : swap_1_1.
  rnorm_unknown c d e.  print_goals : norm_uk.

  rlet_abstract 3 xc (g ^ c).  print_goals : applet1.
  rlet_abstract 4 xd (g ^ d).  print_goals : applet2.
  rlet_abstract 5 xe (g ^ e).  print_goals : applet3.
  rlet_abstract 6 t (e(g,g)^(c*d*e)). print_goals : applet4.

  assumption -> bddh u. rnorm. rswap 4 4.  print_goals : after_rbddh.

  rrandom 8 (x -> x - log(b?m0:m1)) (x -> x + log(b?m0:m1)) zzzz.
  rnorm. rswap 7 2.  print_goals : after_random.

  rindep.  print_goals : after_indep.