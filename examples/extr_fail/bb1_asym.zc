adversary A1 : () -> Fq.
adversary A2 : (G_1 * G_2 * G_2) -> (G_t * G_t).
adversary A3 : (G_t * G_1 * G_2) -> Bool.
oracle Kg1 : Fq -> (G_1 * G_1).
oracle Kg2 : Fq -> (G_1 * G_1).
bilinear map e : G_1 * G_2 -> G_t.

assumption_decisional bddh
  [ a <-$ Fq; b <-$ Fq; c <-$ Fq;
    let ga = g_1 ^ a;
    let gb = g_1 ^ b; let gb' = g_2 ^ b;
    let gc = g_1 ^ c; let gc' = g_2 ^ c;
    let t = g_t^(a*b*c); ]
  [ a <-$ Fq; b <-$ Fq; c <-$ Fq; d <-$ Fq;
    let ga = g_1 ^ a;
    let gb = g_1 ^ b; let gb' = g_2 ^ b;
    let gc = g_1 ^ c; let gc' = g_2 ^ c;
    let t = g_t^d; ]
    a b c d.

prove
  [ i' <- A1();
    c <-$ Fq;
    d <-$ Fq;
    h <-$ Fq;
    let pk1 = g_1^c;
    let pk2 = g_2^d;
    let pk3 = g_2^h;
    (m0,m1) <- A2(pk1,pk2,pk3)  with
      Kg1(i) = [ (g_1^(c*d + r*(d*i + h)), g_1^r)
               | not (i=i'), r <-$ Fq];
    b <-$ Bool;
    let mb = (b?m0:m1);
    e' <-$ Fq;
    b' <- A3(mb * e(pk1,pk2)^e', g_1^e', (pk2^i'*pk3)^e') with
      Kg2(i) = [ (g_1^(c*d + r*(d*i + h)), g_1^r)
               | not (i=i'), r <-$ Fq];
  ] : b = b'.
  bycrush 6.
  qed.
  print_proof.
  extract "extraction/bb1_asym.ec".