adversary A1 : (G * G * G * G) -> (G * G).
adversary A2 : (G * G * G * G) -> Bool.
oracle Dec1 : (G * G * G * G) -> G.
oracle Dec2 : (G * G * G * G) -> G.

operator H : ( G * G * G) -> Fq.

assumption_decisional ddh
  [ x <-$ Fq; y <-$ Fq;
    let gx = g ^ x; let gy = g ^ y; let gxy = g ^ (x * y); ]
  [ x <-$ Fq; y <-$ Fq; z <-$ Fq;
    let gx = g ^ x; let gy = g ^ y; let gxy = g ^ z; ]
    x y z.

assumption_computational tcr
  [ a <-$ Fq; b <-$ Fq; c <-$ Fq;
    let ga = g ^ a; let gb = g ^ b; let gc = g ^ c; ]
  (x : (G * G * G) -> (H(x) = H(ga,gb,gc)) /\ not (x = (ga,gb,gc)) )
  a b c.

prove
  [ w  <-$ Fq;
    x1 <-$ Fq;
    x2 <-$ Fq;
    y1 <-$ Fq;
    y2 <-$ Fq;
    z1 <-$ Fq;
    z2 <-$ Fq;
    (* secret key is x1,x2,y1,y2,z1,z2 *)
    let p1 = g^(x1+w*x2);
    let p2 = g^(y1+w*y2);
    let p3 = g^(z1+w*z2);
    let p4 = g^w;
    
    (m0,m1) <- A1(p1,p2,p3,p4) with
      Dec1(a,a',c,d) =
        [ c * (a^z1 * a' ^z2)^(-1)
        | d = a^(x1+H(a,a',c)*y1) * a'^(x2+H(a,a',c)*y2) ];

    b <-$ Bool;
    let mb = (b?m0:m1);
    (* randomness for encryption is u *)
    u <-$ Fq;
    (* we break the connection between sa' and the rest using DDH *)
    (* sc and sa are required for decryption *)
    let sa  = g^u;
    let sa' = p4^u;
    let sc  = mb * p3^u;
    let sd  = p1^u * p2^(u*H(sa,sa',sc));

    b' <- A2(sa,sa',sc,sd) with
      Dec2(a,a',c,d) =
        [ c * (a^z1 * a'^z2)^(-1)
        | not ((a,a',c,d) = (sa,sa',sc,sd)),
          d = a^(x1+H(a,a',c)*y1) * a'^(x2+H(a,a',c)*y2) ];

  ] : b = b'.
  rnorm. assumption_decisional _ _ v. (* we could use crush 1, but we want to name the variable v *)
  rexcept 3 u*w.
  crush 3. rnorm.
  
  (* if a^w = a' for all queries, b not used in game anymore *)
  radd_test (10,1,1) (a^w = a') A3 ga ga' gc gd. bycrush 1.
  rsimp. crush 2. rnorm.

  radd_test (12,1,2) (a^w = a') A4 ea ea' ec ed. last. bycrush 1.
  rsimp.

  rcase_ev  H(ea,ea',ec) = H(g ^ u,g ^ v,g ^ z2). last. bycrush 1.
  rnorm.

  (* if EV ==> not ((ga,ga',gc) = (g ^ u,g ^ v,g ^ z2)) /\ H(ga,ga',gc) = H(g ^ u,g ^ v,g ^ z2), we can apply TCR *)
  rcase_ev (ea,ea',ec) = (g ^ u,g ^ v,g ^ z2). bycrush 1.

  rremove_ev 1. rremove_ev 1. rremove_ev 1. rnorm_unknown u v z2. rexcept 3. rswap 3 -1.
    rswap 11 -8. rlet_abstract 4 tu g^u. rlet_abstract 5 tv g^v. rlet_abstract 6 tz g^z2.
    assumption_computational _ (ea,ea',ec).
  qed.
  print_proof.
  extract "extraction/cramer_shoup.ec".
  
  (* note that for all add_test or case_ev, we can immediately discharge one branch with
     bycrush 1, maybe this allows us not to perform backtracking on the different choices
     for applying these rules *)