adversary A1 : () -> Fq.
adversary A2 : (G * G * G) -> (G_t * G_t).
adversary A3 : (G_t * G * G) -> Bool.
oracle Kg1 : Fq -> (G * G).
oracle Kg2 : Fq -> (G * G).
bilinear map e : G * G -> G_t.

assumption_decisional bddh
  [ a <-$ Fq; b <-$ Fq; c <-$ Fq;
    let ga = g ^ a; let gb = g ^ b; let gc = g ^ c; let t = g_t^(a*b*c); ]
  [ a <-$ Fq; b <-$ Fq; c <-$ Fq; d <-$ Fq;
    let ga = g ^ a; let gb = g ^ b; let gc = g ^ c; let t = g_t^d; ]
    a b c d.

prove
  [ i' <- A1();
    c <-$ Fq;
    d <-$ Fq;
    h <-$ Fq;
    let pk1 = g^c;
    let pk2 = g^d;
    let pk3 = g^h;
    (m0,m1) <- A2(pk1,pk2,pk3)  with
      Kg1(i) = [ (g^(c*d + r*(d*i + h)), g^r)
               | not (i=i'), r <-$ Fq];
    b <-$ Bool;
    let mb = (b?m0:m1);
    e' <-$ Fq;
    b' <- A3(mb * e(pk1,pk2)^e', g^e', (pk2^i'*pk3)^e') with
      Kg2(i) = [ (g^(c*d + r2*(d*i + h)), g^r2)
               | not (i=i'), r2 <-$ Fq];
  ] : b = b'.
  
  rnorm. rswap 7 -3.

  rrandom 5 _ (h -> h + d * i').
  rnorm.

  rrandom_oracle (6,1,2) _ (r -> r * (i - i') + c).
  rnorm.

  rrandom_oracle (8,1,2) _ (r -> r * (i - i') + c).
  rnorm.

  rswap 1 3.
  rnorm_unknown c d e'.

  rlet_abstract 4 xc (g ^ c).
  rlet_abstract 5 xd (g ^ d).
  rlet_abstract 6 xe (g ^ e').
  rlet_abstract 7 t (g_t^(c*d*e')).
  assumption_decisional -> bddh u. rnorm. rswap 4 4.
  
  rrandom 8 _ _. rnorm. rindep.

extract "extraction/bb1.ec".