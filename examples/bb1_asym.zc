adversary A1 : () -> Fq.
adversary A2 : (G * G * G_s * G_s * G_t) -> (G_t * G_t).
adversary A3 : (G_t * G * G) -> Bool.
oracle Kg1 : Fq -> (G_s * G_s).
oracle Kg2 : Fq -> (G_s * G_s).
bilinear map e : G * G_s -> G_t.

assumption bddh
  [ a <-$ Fq; b <-$ Fq; c <-$ Fq;
    let ga = g ^ a; let gc = g ^ c;
    let ga' = g_s ^ a; let gb' = g_s ^ b;
    let t = e(g,g_s)^(a*b*c); ]
  [ a <-$ Fq; b <-$ Fq; c <-$ Fq;
    let ga = g ^ a; let gc = g ^ c;
    let ga' = g_s ^ a; let gb' = g_s ^ b;
    d <-$ Fq; let t = e(g,g_s)^d; ]
  a b c d.

prove
  [ i' <- A1();
    alpha <-$ Fq;
    beta  <-$ Fq;
    delta <-$ Fq;
    let g1  = g^alpha;
    let h1  = g^delta;
    let g1' = g_s^alpha;
    let h1' = g_s^delta;
    let g0' = g_s^(alpha*beta);
    let v = e(g,g0');
    (m0,m1) <- A2(g1,h1,g1',h1',v) with
      Kg1(i1) = [ (g0'*(g1'^i1*h1')^r1, g_s^r1)
                | not (i1 = i'), r1 <-$ Fq ];
    b <-$ Bool;
    let mb = b?m0:m1;
    s <-$ Fq;
    let c1 = mb*v^s;
    let c2 = g^s;
    let c3 = (g1^i'*h1)^s;
    b' <- A3(c1, c2, c3) with
      Kg2(i2) = [ (g0'*(g1'^i2*h1')^r2, g_s^r2)
                | not (i2 = i'), r2 <-$ Fq ];
  ] : b = b'.  print_goals : start.
  rnorm.  print_goals : start.

  rnorm. rnorm_unknown alpha beta delta.
  print_goals : after_norm.

(*
  rrandom 5 _ (x -> x + d * i') z.
  rnorm. print_goals : after_random.

  rrandom_oracle (6,1,2) _ (x -> x * (i1 - i') + c) zz.
  rnorm.  print_goals : after_random_Kg1.

  rrandom_oracle (8,1,2) _ (x -> x * (i2 - i') + c) zzz.
  rnorm.  print_goals : after_random_Kg2.

  rswap 1 3.  print_goals : swap_1_1.
  rnorm_unknown (c,d,e).  print_goals : norm_uk.

  rlet_abstract 3 xc (g ^ c).  print_goals : applet1.
  rlet_abstract 4 xd (g ^ d).  print_goals : applet2.
  rlet_abstract 5 xe (g ^ e).  print_goals : applet3.
  rlet_abstract 6 t (e(g,g)^(c*d*e)). print_goals : applet4.

  assumption -> bddh u. rnorm. rswap 4 4.  print_goals : after_rbddh.

  rrandom 8 (x -> x - log(b?m0:m1)) (x -> x + log(b?m0:m1)) zzzz.
  rnorm. rswap 7 2.  print_goals : after_random.

  rindep.  print_goals : after_indep. *)