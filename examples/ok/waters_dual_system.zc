bilinear map e : G * G -> G_t.

(* DBDH assumption *)
adversary A_dbdh : (G * G * G * G * G_t) -> Bool.

assumption dbdh
  [ let g1 = g; c1 <-$ Fq; c2 <-$ Fq; c3 <-$ Fq;
    b <- A_dbdh(g1,g1^c1,g1^c2,g1^c3,e(g1,g1)^(c1*c2*c3)); ]
  [ let g1 = g; c1 <-$ Fq; c2 <-$ Fq; c3 <-$ Fq; t <-$ Fq;
    b <- A_dbdh(g1,g1^c1,g1^c2,g1^c3,e(g1,g1)^t); ].

(* DLIN assumption *)
adversary A_dlin : (G * G * G * G * G * G) -> Bool.

assumption dlin
  [ let g1 = g; f <-$ G; nu <-$ G; c1 <-$ Fq; c2 <-$ Fq;
    b <- A_dlin(g1,f,nu,g1^c1,f^c2,nu^(c1+c2)); ]
  [ let g1 = g; f <-$ G; nu <-$ G; c1 <-$ Fq; c2 <-$ Fq; t <-$ G;
    b <- A_dlin(g1,f,nu,g1^c1,f^c2,t); ].


adversary A1 : (G*G*G*G*G*G*G*G*G*G*G*G*G_t) -> (Fq * G_t * G_t).
adversary A2 : (Fq*G_t*G*G*G*G*G*G*G*G*G) -> Bool.
oracle KeyGen1 : Fq -> (Fq*G*G*G*G*G*G*G*G).
oracle KeyGen2 : Fq -> (Fq*G*G*G*G*G*G*G*G).

bound_succ
[ (* setup *)
  let g1 = g;
  v     <-$ G; 
  v1    <-$ G;
  v2    <-$ G;
  w     <-$ G;
  u     <-$ G;
  h     <-$ G;
  a1    <-$ Fq;
  a2    <-$ Fq;
  b     <-$ Fq;
  alpha <-$ Fq;
  
  let tau1 = v*v1^a1;
  let tau2 = v*v2^a2;
  let p0   = g1^b;
  let p1   = g1^a1;
  let p2   = g1^a2;
  let p3   = g1^(b*a1);
  let p4   = g1^(b*a2);
  let p5   = e(g1,g1)^(alpha*a1*b);
  (ci,m0,m1) <- A1(p0,p1,p2,p3,p4,tau1,tau2,tau1^b,tau2^b,w,u,h,p5)
    with
    KeyGen1(i) =
      [ (tagk,d1,d2,d3,d4,d5,d6,d7,k)
      | r1   <-$ Fq,
        r2   <-$ Fq,
        z1   <-$ Fq,
        z2   <-$ Fq,
        tagk <-$ Fq,
        let r  = r1 + r2,
        let d1 = g1^(alpha*a1)*v^r,
        let d2 = g1^(-alpha)*v1^r*g1^z1,
        let d3 = (g1^b)^-z1,
        let d4 = v2^r*g1^z2,
        let d5 = (g1^b)^-z2,
        let d6 = g1^(r2*b),
        let d7 = g1^r1,
        let k  = (u^i*w^tagk*h)^r1 ];
  
  beta <-$ Bool;  
  let m = beta?m0:m1;
  (* encryption of Enc(PK,i,m) *)
  s1   <-$ Fq;
  s2   <-$ Fq;
  t    <-$ Fq;
  tagc <-$ Fq;
  let c0 = m*p5^s2;
  let c1 = p0^(s1+s2);
  let c2 = p3^s1;
  let c3 = p1^s1;
  let c4 = p4^s2;
  let c5 = p2^s2;
  let c6 = tau1^s1*tau2^s2;
  let c7 = (tau1^b)^s1*(tau2^b)^s2*w^-t;
  let e1 = (u^ci*w^tagc*h)^t;
  let e2 = g1^t;
  
  beta' <- A2(tagc,c0,c1,c2,c3,c4,c5,c6,c7,e1,e2)
    with
    KeyGen2(i) =
      [ (tagk,d1,d2,d3,d4,d5,d6,d7,k)
      | i <> ci,
        r1   <-$ Fq,
        r2   <-$ Fq,
        z1   <-$ Fq,
        z2   <-$ Fq,
        tagk <-$ Fq,
        let r  = r1 + r2,
        let d1 = g1^(alpha*a1)*v^r,
        let d2 = g1^(-alpha)*v1^r*g1^z1,
        let d3 = (g1^b)^-z1,
        let d4 = v2^r*g1^z2,
        let d5 = (g1^b)^-z2,
        let d6 = g1^(r2*b),
        let d7 = g1^r1,
        let k  = (u^i*w^tagk*h)^r1 ];
] : beta = beta' /\ not (ci in Log (KeyGen1)).
(* make ciphertext semi-functional by applying DLIN *)
swap 8 -6. swap 9 -6.
let_abstract 4 f (g1^a1).
let_abstract 5 nu (g1^a2).
rnd 6 (yv -> g1 ^ yv) (v -> log(v)).
let_unfold 12. let_unfold 12. let_unfold 12.
let_unfold 12. let_unfold 12. let_unfold 12.
let_unfold 12. let_unfold 12.
norm_nounfold.
norm_unknown a1 a2.
let_abstract 10 f (g1^a1).
let_abstract 11 nu (g1^a2).




subst 1 (e(g1,g1)^a1) (e(f,g1)).
swap 8 -5. except 3 0. rnd 4 (v1 -> v1^(1/a1)) (v1 -> v1 ^ a1). let_unfold 5.
subst 1 ((v1^(1 / a1))^a1) v1.
swap 9 -4. except 5 0. rnd 6 (v2 -> v2^(1/a2)) (v2 -> v2 ^ a2). let_unfold 7.
subst 1 ((v2^(1 / a2))^a2) v2.
let_abstract 5 v1_a (v1^a1).
let_abstract 14 v2_a (v2^a2).
except 3 0.
rnd 4 (v1 -> 1/a1) (v1 -> v1 ^ a1).
admit.
(* g1,f,v <-$ G; c1,c2 <-$ Fq: (g1,f,v,g1^c1,f^c2,v^(c1+c2)) *)
(* g1 := g1, g^a1 := f, g^ *)
(* make queried keys semi-functional by applying DLIN *)
(* make ciphertext one-time-pad by applying DBDH *)
qed.