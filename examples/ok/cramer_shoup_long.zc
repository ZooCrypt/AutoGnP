adversary A_ddh : (G * G * G) -> Bool.

assumption ddh ([x,y])
  [ x <-$ Fq; y <-$ Fq;
    b <- A_ddh(g^x,g^y,g^(x*y)); ]
  [ x <-$ Fq; y <-$ Fq; z <-$ Fq;
    b <- A_ddh(g^x,g^y,g^z); ].

operator H : (G * G * G) -> Fq.

adversary A_tcr : (G * G * G) -> (G * G * G).

assumption tcr succ
  [ a <-$ Fq; b <-$ Fq; c <-$ Fq;
    (x1,x2,x3) <- A_tcr(g^a,g^b,g^c); ]
  : (H(x1,x2,x3) = H(g^a,g^b,g^c))
    /\ not ((x1,x2,x3) = (g^a,g^b,g^c)).

adversary A1 : (G * G * G * G) -> (G * G).
adversary A2 : (G * G * G * G) -> Bool.
oracle Dec1 : (G * G * G * G) -> G.
oracle Dec2 : (G * G * G * G) -> G.

bound_adv
  [ w  <-$ Fq;
    x1 <-$ Fq;
    x2 <-$ Fq;
    y1 <-$ Fq;
    y2 <-$ Fq;
    z1 <-$ Fq;
    z2 <-$ Fq;
    (* secret key is x1,x2,y1,y2,z1,z2 *)
    let p1 = g^(x1+w*x2);
    let p2 = g^(y1+w*y2);
    let p3 = g^(z1+w*z2);
    let p4 = g^w;
    
    (m0,m1) <- A1(p1,p2,p3,p4) with
      Dec1(a,a',c,d) =
        [ c * (a^z1 * a' ^z2)^(-1)
        | d = a^(x1+H(a,a',c)*y1) * a'^(x2+H(a,a',c)*y2) ];

    b <-$ Bool;
    let mb = (b?m0:m1);
    (* randomness for encryption is u *)
    u <-$ Fq;
    let sa  = g^u;
    let sa' = p4^u;
    let sc  = mb * p3^u;
    let sd  = p1^u * p2^(u*H(sa,sa',sc));

    b' <- A2(sa,sa',sc,sd) with
      Dec2(a,a',c,d) =
        [ c * (a^z1 * a'^z2)^(-1)
        | not ((a,a',c,d) = (sa,sa',sc,sd)),
          d = a^(x1+H(a,a',c)*y1) * a'^(x2+H(a,a',c)*y2) ];

  ] : b = b'.

  (* decisional assumption *)
  unfold. swap u (2).
  assumption_decisional! ddh -> v.
  norm.
  
  (* rnd rule for x1, y1, z1 *)
  except v [u*w].
  rnd! x1 _ _.  (* x1 -> x1 + w*x2. *)
  rnd! y1 _ _.  (* y1 -> y1 + w*y2. *)
  rnd! z1 _ _.  (* z1 -> z1 + w*z2. *)
  norm.
  
  (* add test to Dec1 *)
  add_test (10,1,1) (a^w = a') A3 ga ga' gc gd.
    bycrush.

  (* rnd to x2 and y2 *)
  rewrite_oracle (10,1,1) <-. simp. norm. (* swap x2 b. *)
  rnd! x2 _ _. norm.
  rnd! z2 _ _. norm.
  
  (* add test to Dec2 *)
  add_test (12,1,2) (a^w = a') A4 ea ea' ec ed.
    last. bycrush.

  (* exclude hash collision *)
  simp. norm.
  case_ev H(ea,ea',ec) = H(g^u,g^v,g^z2).
    last. bycrush.
  simp. norm.
  case_ev (ea,ea',ec) = (g^u,g^v,g^z2).
    bycrush.
  swap u w. swap z2 w.
  except v []. swap v z2.
  remove_ev 1 2 3.
  abstract w arg (g^u,g^v,g^z2).
  abstract 14 res1 ea. abstract 15 res2 ea'. abstract 16 res3 ec.
  assumption_computational tcr [arg].
qed.
print_proof!.
extract "extraction/cramer_shoup_long.ec".