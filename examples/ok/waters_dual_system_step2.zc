bilinear map e : G * G -> G_t.

(* DBDH assumption *)
adversary A_dbdh : (G * G * G * G * G_t) -> Bool.

assumption dbdh
  [ c1 <-$ Fq; c2 <-$ Fq; c3 <-$ Fq;
    b <- A_dbdh(g, g^c1, g^c2, g^c3, e(g,g)^(c1*c2*c3)); ]
  [ c1 <-$ Fq; c2 <-$ Fq; c3 <-$ Fq; t <-$ Fq;
    b <- A_dbdh(g, g^c1, g^c2,g^c3, e(g,g)^t); ].

(* DLIN assumption *)
adversary A_dlin : (G * G * G * G * G * G) -> Bool.

assumption dlin
  [ f <-$ G; nu <-$ G; c1 <-$ Fq; c2 <-$ Fq;
    b <- A_dlin(g, f, nu,g^c1, f^c2, nu^(c1+c2)); ]
  [ f <-$ G; nu <-$ G; c1 <-$ Fq; c2 <-$ Fq; t <-$ G;
    b <- A_dlin(g, f, nu,g^c1, f^c2,t); ].
    
adversary A_dkill : () -> Bool.

assumption dkill
  [ k <-$ Fq; b <- A_dkill(); ]
  [ b <- A_dkill(); ].
  
adversary A1 : (G*G*G*G*G*G*G*G*G*G*G*G*G_t) -> (Fq * G_t * G_t).
adversary A2 : (Fq*G_t*G*G*G*G*G*G*G*G*G) -> Bool.
oracle KeyGen1 : Fq -> (Fq*G*G*G*G*G*G*G*G).
oracle KeyGen2 : Fq -> (Fq*G*G*G*G*G*G*G*G).

(* this game already uses semi-functional encryption *)
bound_succ
[ (* setup *)
  let g1 = g;
  v     <-$ G; 
  v1    <-$ G;
  v2    <-$ G;
  w     <-$ G;
  u     <-$ G;
  h     <-$ G;
  a1    <-$ Fq;
  a2    <-$ Fq;
  b     <-$ Fq;
  alpha <-$ Fq;
  
  let tau1 = v*v1^a1;
  let tau2 = v*v2^a2;
  let P0   = g1^b;
  let P1   = g1^a1;
  let P2   = g1^a2;
  let P3   = g1^(b*a1);
  let P4   = g1^(b*a2);
  let P5   = e(g1,g1)^(alpha*a1*b);
  (ci,m0,m1) <- A1(P0,P1,P2,P3,P4,tau1,tau2,tau1^b,tau2^b,w,u,h,P5)
    with
    KeyGen1(i) =
      [ (tagk,D1,D2,D3,D4,D5,D6,D7,k)
      | r1   <-$ Fq,
        r2   <-$ Fq,
        z1   <-$ Fq,
        z2   <-$ Fq,
        tagk <-$ Fq,
        let r  = r1 + r2,
        let D1 = g1^(alpha*a1)*v^r,
        let D2 = g1^(-alpha)*v1^r*g1^z1,
        let D3 = (g1^b)^-z1,
        let D4 = v2^r*g1^z2,
        let D5 = (g1^b)^-z2,
        let D6 = g1^(r2*b),
        let D7 = g1^r1,
        let k  = (u^i*w^tagk*h)^r1 ];
  
  beta <-$ Bool;  
  let m = beta?m0:m1;
  (* encryption of Enc(PK,i,m) *)
  s1   <-$ Fq;
  s2   <-$ Fq;
  t    <-$ Fq;
  tagc <-$ Fq;
  let C0 = m*P5^s2;
  let C1 = P0^(s1+s2);
  let C2 = P3^s1;
  let C3 = P1^s1;
  let C4' = P4^s2;
  let C5' = P2^s2;
  let C6' = tau1^s1*tau2^s2;
  let C7' = (tau1^b)^s1*(tau2^b)^s2*w^-t;
  let E1 = (u^ci*w^tagc*h)^t;
  let E2 = g1^t;

  (* modifications to make ciphertext semi-functional *)
  x <-$ Fq;
  let C4 = C4' *  g^(b*a2*x);
  let C5 = C5' * g^(a2*x);
  let C6 = C6' * v2^(a2*x);
  let C7 = C7' * v2^(b*a2*x);
  
  beta' <- A2(tagc,C0,C1,C2,C3,C4,C5,C6,C7,E1,E2)
    with
    KeyGen2(i) =
      [ (tagk,D1,D2,D3,D4,D5,D6,D7,k)
      | i <> ci,
        r1   <-$ Fq,
        r2   <-$ Fq,
        z1   <-$ Fq,
        z2   <-$ Fq,
        tagk <-$ Fq,
        let r  = r1 + r2,
        let D1 = g1^(alpha*a1)*v^r,
        let D2 = g1^(-alpha)*v1^r*g1^z1,
        let D3 = (g1^b)^-z1,
        let D4 = v2^r*g1^z2,
        let D5 = (g1^b)^-z2,
        let D6 = g1^(r2*b),
        let D7 = g1^r1,
        let k  = (u^i*w^tagk*h)^r1 ];
] : (beta = beta') /\ not (ci in Log (KeyGen1)).
(* make ciphertext semi-functional by applying DLIN *)
hybrid (20,1)
  [ (tagk,D1,D2,D3,D4,D5,D6,D7,k) |
    r1 <-$ Fq,
    r2 <-$ Fq,
    z1 <-$ Fq,
    z2 <-$ Fq,
    tagk <-$ Fq,
    gamma <-$ Fq,
    let r = r2 + r1,
    let D1' = g1^(a1*alpha) * v^r,
    let D2' = g1^-alpha * v1^r * g1^z1,
    let D3 = (g1^b)^-z1,
    let D4' = v2^r * g1^z2,
    let D5 = (g1^b)^-z2,
    let D6 = g1^(b*r2),
    let D7 = g1^r1,
    let k = (h * u^i * w^tagk)^r1,
    let D1 = D1' * g^(-a1*a2*gamma),
    let D2 = D2' * g^(a2*gamma),
    let D4 = D4' * g^(a1*gamma) ] B.
  admit. (* proof for first hybrid argument *)
hybrid (42,1)
  [ (tagk,D1,D2,D3,D4,D5,D6,D7,k) |
    r1 <-$ Fq,
    r2 <-$ Fq,
    z1 <-$ Fq,
    z2 <-$ Fq,
    tagk <-$ Fq,
    gamma <-$ Fq,
    let r = r2 + r1,
    let D1' = g1^(a1*alpha) * v^r,
    let D2' = g1^-alpha * v1^r * g1^z1,
    let D3 = (g1^b)^-z1,
    let D4' = v2^r * g1^z2,
    let D5 = (g1^b)^-z2,
    let D6 = g1^(b*r2),
    let D7 = g1^r1,
    let k = (h * u^i * w^tagk)^r1,
    let D1 = D1' * g^(-a1*a2*gamma),
    let D2 = D2' * g^(a2*gamma),
    let D4 = D4' * g^(a1*gamma) ] C.
  admit. (* proof for second hybrid argument *)
rename a2 c2.
rename alpha c1.
except 9 [0].
rnd c1 (c1 -> c1 * c2) (c1 -> c1 / c2). unfold r3.



    
    dist_sym.
    
swap.
qed.