(* Cramer-Shoup from the linear assumption, we follow the matrix assumption paper *)
adversary A1 : (G * G) -> (G * G).
adversary A2 : (G * G * G) -> Bool.

adversary A_dlin : G^5 -> Bool.

assumption dlin ([a1,a2])
  [ a1 <-$ Fq; a2 <-$ Fq; r1 <-$ Fq; r2 <-$ Fq;
    b <- A_dlin(g^a1, g^a2, g^(a1*r1), g^(a2*r2), g^(r1+r2));
  ]
  [ a1 <-$ Fq; a2 <-$ Fq; r1 <-$ Fq; r2 <-$ Fq;
    t <-$ Fq;
    b <- A_dlin(g^a1, g^a2, g^(a1*r1), g^(a2*r2), g^t);
  ].

bound_adv
  [ (* secret key a1,a2 *)
    a1 <-$ Fq;
    a2 <-$ Fq;
    let p1 = g^a1;
    let p2 = g^a2;
    (m0,m1) <- A1(p1,p2);
    
    b <-$ Bool;
    let mb = (b?m0:m1);
    
    r1 <-$ Fq;
    r2 <-$ Fq;
    (* we can consider k as the key of the KEM *)
    let k = g^(r1+r2);
    b' <- A2(p1^r1,p2^r2,mb*k);
  ] : b = b'.
  norm.
  swap 5 -2. swap 6 -2.
  conv [
    a1 <-$ Fq;
    a2 <-$ Fq;
    r1 <-$ Fq;
    r2 <-$ Fq;
    (m0,m1) <- A1(g ^ a1,g ^ a2);
    b <-$ Bool;
    b' <- A2(g ^ (a1*r1),g ^ (a2*r2), (b?m0:m1)*g^(r1+r2));
  ] : b = b'.
  abstract 5 arg (g^a1, g^a2, g^(a1*r1), g^(a2*r2), g^(r1+r2)).
  abstract _ ret _.
  assumption_decisional dlin -> [arg] t.
  bycrush.
  qed.
  print_proof.
  extract "extraction/cpa_matrix_dlin.ec".