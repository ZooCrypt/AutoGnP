(* CPA encryption from 2Casc, we follow the matrix assumption paper *)

adversary A_twocasc : (G * G * G * G) -> Bool.

assumption twocasc
  [ a <-$ Fq; r1 <-$ Fq; r2 <-$ Fq;
    b <- A_twocasc(g^a,g^(a*r1),g^(r1 + a*r2),g^r2); ]
  [ a <-$ Fq; r1 <-$ Fq; r2 <-$ Fq; t <-$ Fq;
    b <- A_twocasc(g^a,g^(a*r1),g^(r1 + a*r2),g^t); ].

adversary A1 : G -> (G * G).
adversary A2 : (G * G * G) -> Bool.

bound_adv
  [ (* secret key a1,a2 *)
    a <-$ Fq;
    let p1 = g^a;
    (m0,m1) <- A1(p1);
    
    b <-$ Bool;
    let mb = (b?m0:m1);
    
    r1 <-$ Fq;
    r2 <-$ Fq;
    (* we can consider k as the key of the KEM *)
    let k = g^r2;
    b' <- A2(p1^r1,g^r1*p1^r2,mb*k);
  ] : b = b'.

  norm.
  swap 4 -2. swap 5 -2.
  norm_unknown.
  let_abstract! 4 arg (g^a,g^(a*r1),g^(r1)*g^(a*r2), g^r2).
  let_abstract _ res _.
  norm_unknown.
  assumption_decisional twocasc -> (4-8) t.
  bycrush.
qed.
print_proof.
extract "extraction/cpa_matrix_scasc.ec".